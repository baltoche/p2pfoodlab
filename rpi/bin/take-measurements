#!/bin/bash

#  P2P Food Lab Sensorbox
#
#  Copyright (C) 2013  Sony Computer Science Laboratory Paris
#  Author: Peter Hanappe
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

camera="no"
sensors="no"
poweroff="no"
wakeup_time=""

while (($#)); do
      option=$1
      shift
      case "$option" in
          --camera) 
              camera="yes"
              ;;
          --sensors) 
              sensors="yes"
              ;;
          --poweroff) 
              poweroff="yes"
              wakeup_time=$1
              shift 
              ;;
          *) 
              echo "Unknown option ${option}"
              exit 1
              ;;
      esac      
done

home_dir=/var/p2pfoodlab
d=`date +"%Y%m%d-%H%M%S"`

log_message() {
    #echo $1
    echo $1 >> /var/p2pfoodlab/log.txt
}

bring_up_gsm_network() {
    log_message "[take-measurements @ $d] Info: bring_up_gsm_network" 
    for ((i=0; i<3; i++)); do
        log_message "[take-measurements @ $d] Info: attempt $i" 

        #/usr/sbin/ifplugstatus -qqq ppp0
        #status=$?
        #log_message "[take-measurements @ $d] Info: status $status" 
        #if [ $status != 2 ]; then
        #    log_message "[take-measurements @ $d] Info: Trying to establish the GSM connection" 
        #    route del default
        #    ifup ppp0
        #    sleep 20
        #else 
        #    log_message "[take-measurements @ $d] Info: GSM connection established" 
        #    return
        #fi

        n=`/usr/sbin/ifplugstatus | grep ppp0 | wc -l`
        if [ $n == 0 ]; then
            log_message "[take-measurements @ $d] Info: Trying to establish the GSM connection" 
            #route del default
            wvdial gsmmodem 2>&1 >> /var/p2pfoodlab/log.txt
            sleep 20
        else 
            log_message "[take-measurements @ $d] Info: GSM connection established" 
            return
        fi
    done
    log_message "[take-measurements @ $d] Error: Failed to establish the GSM connection" 
}

bring_up_wifi_network() {
    iface=$1

    n=`/usr/sbin/ifplugstatus | grep $iface | wc -l`
    if [ $n == 0 ]; then
        log_message "[take-measurements @ $d] Info: Unknown interface $iface. Skipping." 
        return
    fi

    for ((i=0; i<3; i++)); do
        log_message "[take-measurements @ $d] Info: /usr/sbin/ifplugstatus $iface" 

        /usr/sbin/ifplugstatus -qqq $iface 
        status=$?
        log_message "[take-measurements @ $d] Info: ifplugstatus $iface: exit code $status"
        if [ $status == "2" ]; then
            log_message "[take-measurements @ $d] Info: $iface is up and running" 
            return
        fi
        
        log_message "[take-measurements @ $d] Info: Trying to connect $iface"
        sudo /sbin/ifup $iface
        #sudo /sbin/ifup --verbose $iface 2>&1 >> /var/p2pfoodlab/log.txt
        sleep 20

    done
    log_message "[take-measurements @ $d] Error: Failed to establish the WiFi connection" 
}

bring_up_network() {
    log_message "[take-measurements @ $d] Info: bring_up_network" 
    gsm=`/var/p2pfoodlab/bin/config-get gsm.enable`
    log_message "[take-measurements @ $d] Info: gsm $gsm" 
    if [ "x$gsm" = "xyes" ]; then
        bring_up_gsm_network
    fi
    wifi=`/var/p2pfoodlab/bin/config-get wifi.enable`
    log_message "[take-measurements @ $d] Info: wifi $wifi" 
    if [ "x$wifi" = "xyes" ]; then
        bring_up_wifi_network wlan0
    fi
}

bring_down_network_iface() {
    iface=$1
    log_message "[take-measurements @ $d] Info: bring_down_network_iface" 
    n=`/usr/sbin/ifplugstatus | grep $iface | wc -l`
    if [ $n == 0 ]; then
        log_message "[take-measurements @ $d] Info: Could not find the $iface network connection" 
    else
        log_message "[take-measurements @ $d] Info: Bringing down the $iface connection" 
        log_message "[take-measurements @ $d] Info: /sbin/ifdown $iface" 
        #sudo /sbin/ifdown --verbose $iface 2>&1 >> /var/p2pfoodlab/log.txt
        sudo /sbin/ifdown $iface
    fi
}

bring_down_network() {
    log_message "[take-measurements @ $d] Info: bring_down_network" 
    gsm=`/var/p2pfoodlab/bin/config-get gsm.enable`
    log_message "[take-measurements @ $d] Info: gsm $gsm" 
    if [ "x$gsm" = "xyes" ]; then
        bring_down_network_iface ppp0
    fi
    wifi=`/var/p2pfoodlab/bin/config-get wifi.enable`
    log_message "[take-measurements @ $d] Info: wifi $wifi" 
    if [ "x$wifi" = "xyes" ]; then
        bring_down_network_iface wlan0
    fi
}


log_message "[take-measurements @ $d] Info: Starting" 

bring_up_network

#ntpdate

# Calling enable-sensors does nothing if they were already enabled.
$home_dir/bin/arduino enable-sensors

if [ "$camera" = "yes" ]; then
    $home_dir/bin/update-photostream
fi

if [ "$sensors" = "yes" ]; then
    $home_dir/bin/update-datastreams
fi

bring_down_network

if [ "$poweroff" = "yes" ]; then
    if [ "x$wakeup_time" != "x" ]; then
        $home_dir/bin/arduino poweroff $wakeup_time
    fi
    sudo poweroff
fi

